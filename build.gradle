/**
 * В данном массиве необходимо объявить все модули которые должны быть залинкованы в общую сборку.
 * Дальше из этого массива создаются команды для очисти и сборки модулей, а так же команда для сборки JRE.
 */
def modules = ['helper', 'startup', 'users']

// очистка собранного образа JRE и модулей приложения
task cleanJavaImage {
    file('javaImageBuild').deleteDir()
}

// очистка директории с скомпилированными модулями
task cleanJavaModules {
    file('modules').deleteDir()
}

// создание команд для очистки модулей
def cleaners = []
modules.each { name ->
    cleaners << name + ':clean'
}
cleaners << 'cleanJavaImage'
cleaners << 'cleanJavaModules'

// задание для очистки модулей и директорий созданных в процессе линковки
task cleanAll(type: GradleBuild) {
    tasks = cleaners
}

// создание команд для сборки модулей
def builders = []
modules.each { name ->
    builders << name + ':build'
}

// задание для сборки модулей
task buildAll(type: GradleBuild) {
    tasks = builders

    dependsOn cleanJavaImage
    dependsOn cleanJavaModules
}

// создание команд для копирования модулей в одно пространство из которо их будет брать линковщик
def copyTasks = []
modules.each { name ->
    copyTasks << name + ':copyToLib'
}

task copyToLibAll(type: GradleBuild) {
    tasks = copyTasks

    dependsOn buildAll
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

// копирование дополнительных библиотек  в директорию с модулями
task addLibraries(type: Copy) {
    from 'libs'
    include '*.jar'
    into 'modules'

    dependsOn copyToLibAll
}

// задание запускающее консольную команду jlink для линковки JRE и java модулей вместе с модулями приложения
def java_home = System.getenv('JAVA_HOME')
task link(type: Exec) {
    commandLine "${java_home}/bin/jlink", '--module-path', "${java_home}/jmods:modules",
            '--add-modules', modules.join(","), '--launcher', "ApplicationLauncher=startup/ru.glance.matrix.startup.common.AppCore",
            '--output', 'javaImageBuild'

    dependsOn addLibraries
}

// копирование exe в директорию образа
task addLauncher(type: Copy) {
    from file("launcher/matrix_launcher.exe")
    into 'javaImageBuild'

    dependsOn link
}

// задание для сборки, линкови и добавления запускающего exe файла для проекта
task linkAll(type: GradleBuild) {
    tasks = ['addLauncher']
}